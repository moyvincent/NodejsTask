name: 'Build Application & Deploy to EKS'

on:
  push:
    branches:
      - '*'
      - '/'
      - '**'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  STAGING_EKS_CLUSTER: staging-koji-trusted
  EKS_REGION: us-west-2
  ECR_REPO: 281467564710.dkr.ecr.us-west-2.amazonaws.com
  KOJI_SERVICE: strapi-cms

jobs:

  build:
    name: Build Application image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: actions/checkout@v2
      - name: Set env
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build prod image and push to ECR
        id: build-prod-image
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
            RELEASE_TAG=$RELEASE_VERSION make build-container
            make push-container
            echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_TAG"
      - name: Build, non-prod images and push to Amazon ECR
        id: build-image
        if: startsWith(github.ref, 'refs/tags/v') != true
        run: |
            make build-container
            make push-container
            echo "::set-output name=image::$ECR_REGISTRY/$KOJI_SERVICE:branch-${GITHUB_REF##*/}"
     
  deploy-k8s:
    name: Deploy to EKS
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: prepor/action-aws-iam-authenticator@master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.EKS_REGION }}

      - name: Install and configure kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(<kubectl.sha256) kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
          aws-iam-authenticator token -i $STAGING_EKS_CLUSTER
      - name: Install kustomize
        run: |
            # Setup kustomize
            cd $( mktemp -d )
            curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz
            chmod u+x ./kustomize
      - name: Connect to EKS cluster
        run: |
          aws eks --region $EKS_REGION update-kubeconfig --name $STAGING_EKS_CLUSTER
      - name: Deploy application to EKS cluster
        env:
          KOJI_ENVIRONMENT: staging
        run: |
          make apply-container-kustomize